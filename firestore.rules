rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.email == 'spacify1807@gmail.com' || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }

    function isVerifiedRecruiter() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/recruiters/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/recruiters/$(request.auth.uid)).data.isVerified == true &&
        get(/databases/$(database)/documents/recruiters/$(request.auth.uid)).data.status == 'active';
    }

    function isRecruiterOwner(recruiterId) {
      return isAuthenticated() && request.auth.uid == recruiterId;
    }

    function canApplyToInternship(userId, internshipId) {
      return isAuthenticated() && userId == request.auth.uid;
    }

    function hasNotAppliedBefore(userId, internshipId) {
      return !exists(/databases/$(database)/documents/applications/$(userId + '_' + internshipId));
    }

    function isPublicInternship() {
      return resource != null &&
        resource.data.get('status', 'draft') in ['published', 'active'];
    }
    
    match /profiles/{userId} {
      allow read: if isOwner(userId) || isAdmin() || (resource != null && resource.data.get('isPublic', false) == true);
      allow create: if isOwner(userId);
      allow write, update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    match /users/{userId} {
      allow read, write, update: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    match /usernames/{username} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /userProfiles/{userId} {
      allow read: if true;
      allow write, create: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * Recruiters Collection
     * Contains company information and verification status
     */
    match /recruiters/{recruiterId} {
      allow read: if isOwner(recruiterId) || isAdmin();
      allow create: if isOwner(recruiterId);
      allow update: if isOwner(recruiterId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * Verification Requests Collection
     * Admin only for managing recruiter verification
     */
    match /verificationRequests/{requestId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    match /internships/{internshipId} {
      allow read: if isPublicInternship() || 
                    (isAuthenticated() && 
                      (resource.data.get('recruiterId', '') == request.auth.uid || isAdmin()));
      // Allow any authenticated user to create internships (recruiters)
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
                    (isAuthenticated() && 
                     resource.data.get('recruiterId', '') == request.auth.uid);
      allow delete: if isAdmin() || 
                    (isAuthenticated() && 
                     resource.data.get('recruiterId', '') == request.auth.uid);
    }
    
    match /companies/{companyId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
    }

    /**
     * Applications Collection
     * Students apply, recruiters review, only one application per student per internship
     */
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.recruiterId ||
         isAdmin());
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == resource.data.recruiterId ||
         isAdmin());
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }

    /**
     * Analytics Collection
     * Tracks views, clicks, conversions
     */
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || 
         request.auth.uid == resource.data.recruiterId);
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    /**
     * Messages Collection
     * Recruiter-student chat
     */
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.recipientId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId;
      allow update: if isAdmin();
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.senderId;
    }
    
    match /referrals/{referralCode} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.referrerId || isAdmin());
    }
    
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    match /feedback/{ticketId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    match /admins/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /systemSettings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /reports/{document} {
      allow read, write: if isAdmin();
    }
    
    match /emailQueue/{emailId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}